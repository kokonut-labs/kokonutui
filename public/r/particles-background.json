{
  "name": "particles-background",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useEffect, useRef, useCallback } from \"react\";\nimport { motion } from \"motion/react\";\n\ninterface CyberBackgroundProps {\n    gridSize?: number;\n    particleCount?: number;\n    noiseIntensity?: number;\n}\n\nfunction createNoise() {\n    const permutation = [\n        151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,\n        140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,\n        120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57,\n        177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74,\n        165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122,\n        60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54,\n        65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169,\n        200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3,\n        64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85,\n        212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170,\n        213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43,\n        172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185,\n        112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191,\n        179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,\n        181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150,\n        254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195,\n        78, 66, 215, 61, 156, 180,\n    ];\n\n    const p = new Array(512);\n    for (let i = 0; i < 256; i++) p[256 + i] = p[i] = permutation[i];\n\n    function fade(t: number) {\n        return t * t * t * (t * (t * 6 - 15) + 10);\n    }\n\n    function lerp(t: number, a: number, b: number) {\n        return a + t * (b - a);\n    }\n\n    function grad(hash: number, x: number, y: number, z: number) {\n        const h = hash & 15;\n        const u = h < 8 ? x : y;\n        const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n        return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n    }\n\n    return {\n        simplex3: (x: number, y: number, z: number) => {\n            const X = Math.floor(x) & 255;\n            const Y = Math.floor(y) & 255;\n            const Z = Math.floor(z) & 255;\n\n            x -= Math.floor(x);\n            y -= Math.floor(y);\n            z -= Math.floor(z);\n\n            const u = fade(x);\n            const v = fade(y);\n            const w = fade(z);\n\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;\n\n            return lerp(\n                w,\n                lerp(\n                    v,\n                    lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)),\n                    lerp(\n                        u,\n                        grad(p[AB], x, y - 1, z),\n                        grad(p[BB], x - 1, y - 1, z)\n                    )\n                ),\n                lerp(\n                    v,\n                    lerp(\n                        u,\n                        grad(p[AA + 1], x, y, z - 1),\n                        grad(p[BA + 1], x - 1, y, z - 1)\n                    ),\n                    lerp(\n                        u,\n                        grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)\n                    )\n                )\n            );\n        },\n    };\n}\n\nexport default function ParticlesBackground({\n    particleCount = 100,\n    noiseIntensity = 0.03,\n}: CyberBackgroundProps) {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const noise = createNoise();\n\n    const drawParticles = useCallback(\n        (ctx: CanvasRenderingContext2D, particles: Particle[]) => {\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n            for (const particle of particles) {\n                const n = noise.simplex3(\n                    particle.x * noiseIntensity,\n                    particle.y * noiseIntensity,\n                    Date.now() * 0.0001\n                );\n\n                const gradient = ctx.createRadialGradient(\n                    particle.x,\n                    particle.y,\n                    0,\n                    particle.x,\n                    particle.y,\n                    particle.size * 2\n                );\n                gradient.addColorStop(\n                    0,\n                    `hsla(${particle.hue}, 100%, 70%, 0.8)`\n                );\n                gradient.addColorStop(1, `hsla(${particle.hue}, 100%, 50%, 0)`);\n\n                ctx.fillStyle = gradient;\n                ctx.beginPath();\n                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n                ctx.fill();\n\n                particle.x += Math.cos(n * Math.PI * 2) * 0.8;\n                particle.y += Math.sin(n * Math.PI * 2) * 0.8;\n\n                if (particle.x < -50) particle.x = ctx.canvas.width + 50;\n                if (particle.x > ctx.canvas.width + 50) particle.x = -50;\n                if (particle.y < -50) particle.y = ctx.canvas.height + 50;\n                if (particle.y > ctx.canvas.height + 50) particle.y = -50;\n            }\n        },\n        [noise, noiseIntensity]\n    );\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n\n        const particles: Particle[] = Array.from(\n            { length: particleCount },\n            () => ({\n                x: Math.random() * canvas.offsetWidth,\n                y: Math.random() * canvas.offsetHeight,\n                size: Math.random() * 3 + 2,\n                hue: Math.random() * 60 + 200,\n            })\n        );\n\n        const resize = () => {\n            canvas.width = canvas.offsetWidth;\n            canvas.height = canvas.offsetHeight;\n        };\n\n        const animate = () => {\n            ctx.fillStyle = \"rgba(9, 9, 11, 0.1)\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            drawParticles(ctx, particles);\n            requestAnimationFrame(animate);\n        };\n\n        resize();\n        animate();\n        window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, [drawParticles, particleCount]);\n\n    return (\n        <div className=\"absolute inset-0 overflow-hidden bg-zinc-900\">\n            <canvas\n                ref={canvasRef}\n                className=\"absolute inset-0 w-full h-full\"\n            />\n\n            <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n                <motion.h1\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 1.5, delay: 0.2 }}\n                    className=\"text-7xl font-bold text-transparent bg-clip-text bg-linear-to-r from-indigo-400 via-pink-300 to-blue-400 relative z-20\"\n                >\n                    <span className=\"relative inline-block\">\n                        Particles\n                        <span className=\"absolute inset-0 text-transparent bg-clip-text bg-linear-to-r from-indigo-600/80 via-pink-500/80 to-blue-600/80 mix-blend-overlay -m-[2px]\">\n                            Particles\n                        </span>\n                    </span>\n                </motion.h1>\n            </div>\n\n            <div className=\"absolute inset-0 bg-linear-to-b from-zinc-900/20 to-zinc-900/80 mix-blend-multiply z-15\" />\n        </div>\n    );\n}\n\ninterface Particle {\n    x: number;\n    y: number;\n    size: number;\n    hue: number;\n}\n",
      "path": "/components/kokonutui/particles-background.tsx",
      "target": "/components/kokonutui/particles-background.tsx"
    }
  ]
}